Description: >
  This template deploys environment.

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${TagPrefix}:VPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${TagPrefix}:PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${TagPrefix}:PublicSubnet2
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${TagPrefix}:PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${TagPrefix}:PrivateSubnet2
  PublicAccessSecurityGroupId:
    Value: !GetAtt PublicAccessSecurityGroup.GroupId
    Export:
      Name: !Sub ${TagPrefix}:PublicAccessSecurityGroupId
  InternalAccessSecurityGroupId:
    Value: !GetAtt InternalSecurityGroup.GroupId
    Export:
      Name: !Sub ${TagPrefix}:InternalAccessSecurityGroupId
  LoadBalancer:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${TagPrefix}:LoadBalancer
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${TagPrefix}:LoadBalancerDNSName

Parameters:
  TagPrefix:
    Description: Prefix of the Stack
    Type: String
  VpcCIDR:
    Description: VPC CIDR
    Type: String
  PublicSubnetCIDR1:
    Description: Public subnet 1 CIDR
    Type: String
  PublicSubnetCIDR2:
    Description: Public subnet 2 CIDR
    Type: String
  PrivateSubnetCIDR1:
    Description: Private subnet 1 CIDR
    Type: String
  PrivateSubnetCIDR2:
    Description: Private subnet 1 CIDR
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  EipForNatGW1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NatGW1:
    Type: AWS::EC2::NatGateway
    DependsOn : EipForNatGW1
    Properties:
      AllocationId: !GetAtt EipForNatGW1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix} NatGateway (AZ1)

  EipForNatGW2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NatGW2:
    Type: AWS::EC2::NatGateway
    DependsOn : EipForNatGW2
    Properties:
      AllocationId: !GetAtt EipForNatGW2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix} NatGateway (AZ2)

  # Public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Public Subnet (AZ1)

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Public Subnet (AZ2)

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private subnets
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Private Routes1
    DependsOn: NatGW1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW1
    DependsOn: NatGW1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PrivateSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Private Subnet (AZ1)

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Private Routes2
    DependsOn: NatGW2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW2
    DependsOn: NatGW2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref PrivateSubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${TagPrefix} Private Subnet (AZ2)

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Security groups
  PublicAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SecurityGroup for load balancers
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 81
          ToPort: 81
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-PublicAccessSecurityGroup

  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for internal access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-InternalAccessSecurityGroup

  InternalSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InternalSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref InternalSecurityGroup

  # Base LoadBalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${TagPrefix}-PublicALB
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicAccessSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref TagPrefix

